snippet module
	module ${1}
		${2}
	end

snippet class
	class ${1}
		${2}
	end

snippet def "def" b
	def ${1:name}
		${2}
	end

snippet if
	if ${1}
		${2}
	end

snippet ifelse
	if ${1}
		${2}
	else
		${3}
	end

snippet import
	import ${1} from '${2}'

snippet binding.pry
	binding.pry

snippet it
	it "${1}" do
		${2}
	end

snippet describe
	describe "${1}" do
		${2}
	end

snippet context
	context "${1}" do
		${2}
	end

snippet let
	let(:${1}) { ${2} }

snippet create
	create(:${1})

snippet render
	render(${1:name}Component.new) do
		${2}
	end

snippet styled_container
	styled_container do
		${1}
	end

snippet Flipper
	Flipper[${1}].enabled?(ActsAsTenant.current_tenant)

snippet ActsAsTenant
	ActsAsTenant.current_tenant.${1}
